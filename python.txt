//python notes ->

--functions
basic fucntion syntax
function with multiple parameters
polymorphism in functions
function returning multiple values
default parameter value
lambda function
function with *args
fucntion with **kwargs
generator function with yield
Recursive Fucntion

def square(number):
    return number ** 2
ans = square(4)
    print(ans)

cube = lambda x: x**3
    print(cube(4))

def sum_all(*args):
    return sum(args)
printf(sum_all(1,2))
printf(sum_all(1,2,3,4,5))

def print_kwargs(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")
print_kwargs(name="xyz", power="abc")

--scopes and closure
def f1():
    x = 88
    def f2():
        print(x)
    return f2
myResult = f1()
myResult()

def chaicoder(num):
    def actual(x):
        return x ** num
    return actual
f = chaicoder(2)
g = chaicoder(3)
print(f(3)) -> 9
print(g(3)) -> 27

--Objects Orientation Programming
basic class and objects
class method and self
inheritance
encapsulation
class variable
static method
property decorators
class inheritance and isinstance() function
multiple Inheritance

class Car:
    def __init__(self,brand, model):
        self.brand = brand
        self.model = model  

        def full_name(self):
            return f"{self.brand} {self.model}"
class ElectricCar(Car):
    def __init__(self, brand, model, battery_size):
        super().__init___(brand, model)
        self.battery_size = battery_size

my_car = Car("Toyota", "Corolla")
print(my_car.brand)
print(my_car.full_name())
my_tesla = ElectricCar("Tesla", "Model5", "85KWH")
print(my_tesla.full_name())

//if we use double underscore before a variable it becomes private